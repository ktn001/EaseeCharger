#!/usr/bin/php
<?php

$usage = "
usage:
~~~~~~
        " . basename($argv[0]) . " [-h] [-c command] -m model

   -h         : Cette aide
   -c command : Le logicalId d'une commande
   -m model   : Le modèle
";

$options = getopt('hm:c:');

$model = '';
$command = '';

foreach ($options as $opt => $value) {
	switch ($opt) {
	case 'h':
		print $usage;
		exit (0);
		break;
	case 'm':
		$model = $value;
		break;
	case 'c':
		$command = $value;
	}
}

if (! $model) {
	print ("ERREUR: la modèle n'est pas défini!\n");
	exit (1);
}

$globalConfigs = parse_ini_file(__DIR__ . '/../../core/config/cmd.config.ini', true, INI_SCANNER_RAW);
$plugin_cmds = array();
$plugin_groups = array();
foreach ($globalConfigs as $name => $section) {
	if (strpos($name, 'group:') === 0) {
		$name = substr($name,6);
		$plugin_groups[$name] = $section;
	} else {
		$plugin_cmds[$name] = $section;
	}
}

$modelConfigs = parse_ini_file(__DIR__ . '/../../core/config/' . $model . '/cmd.config.ini', true, INI_SCANNER_RAW);
$model_cmds = array();
$model_groups = array();
foreach ($modelConfigs as $name => $section) {
	if (strpos($name, 'group:') === 0) {
		$name = substr($name,6);
		$model_groups[$name] = $section;
	} else {
		$model_cmds[$name] = $section;
	}
}

if ($command) {
	$commands = array($command);
} else {
	$commands = array_unique(array_merge(array_keys($plugin_cmds), array_keys($model_cmds)));
	sort($commands);
}

foreach ($commands as $cmd) {
	print ("\nLogicalId: $cmd");
	$group = "";
	if (array_key_exists($cmd,$model_cmds) && array_key_exists('group', $model_cmds[$cmd])) {
		$group = $model_cmds[$cmd]['group'];
	} else if (array_key_exists($cmd,$plugin_cmds) && array_key_exists('group', $plugin_cmds[$cmd])) {
		$group = $plugin_cmds[$cmd]['group'];
	}
	$parameters = array();
	if (array_key_exists($cmd,$model_cmds)) {
		$parameters = array_keys($model_cmds[$cmd]);
	}
	if (array_key_exists($cmd,$plugin_cmds)) {
		$parameters = array_merge($parameters,array_keys($plugin_cmds[$cmd]));
	}
	if ($group) {
		print ("       GROUP: " . $group . "\n");
		if (array_key_exists($group,$model_groups)) {
			$parameters = array_merge($parameters,array_keys($model_groups[$group]));
		}
		if (array_key_exists($group,$plugin_groups)) {
			$parameters = array_merge($parameters,array_keys($plugin_groups[$group]));
		}
	} else {
		print ("\n");
	}
	$parameters = array_unique($parameters);
	sort($parameters);
	$format = "    %-20s |%-25s |%-25s |%-25s |%-25s |%-1s\n";
	print (sprintf($format,"Parametre","Valeur finale","Commande modele","Commande Plugin","Groupe modele","Groupe plugin"));
	print (sprintf($format,"~~~~~~~~~","~~~~~~~~~~~~~","~~~~~~~~~~~~~~~","~~~~~~~~~~~~~~~","~~~~~~~~~~~~~","~~~~~~~~~~~~~"));
	foreach ($parameters as $parameter) {
		$mc = $model_cmds[$cmd][$parameter] ?? "-";
		$pc = $plugin_cmds[$cmd][$parameter] ?? "-";
		$mg = $model_groups[$group][$parameter] ?? "-";
		$pg = $plugin_groups[$group][$parameter] ?? "-";
		if ($mc != '-') {
			$final = $mc;
		} else if ($pc != '-') {
			$final = $pc;
		} else if ($mg != '-') {
			$final = $mg;
		} else if ($pg != '-') {
			$final = $pg;
		}
		$line = sprintf($format,$parameter,$final,$mc,$pc,$mg,$pg);
		print ($line);
	}
}



?>
